---
import { Player } from "@/components/Player";
import AsideMenu from "../components/AsideMenu.astro";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions fallback="none" />
  </head>
  <body>
    <div id="app" class="relative h-screen p-2 gap-2">
      <aside class="[grid-area:aside] flex-col flex">
        <AsideMenu />
      </aside>

      <main
        class="[grid-area:main] rounded-lg bg-ebony-clay-950 overflow-y-auto w-full"
      >
        <slot />
      </main>

      <footer class="[grid-area:player] h-[80px] -bottom">
        <Player client:load transition:name="media-player" transition:persist />
      </footer>
    </div>
    <style>
      #app {
        display: grid;
        grid-template-areas:
          "aside main main"
          "player player player";
        grid-template-columns: 350px 1fr;
        grid-template-rows: 1fr auto;
      }
    </style>

    <style is:global>
      html {
        font-family: "CircularStd", system-ui, sans-serif;
        background: #010101;
        color: white;
      }

      [data-title]:hover:after {
        opacity: 1;
        transition: all 150ms ease 300ms;
        visibility: visible;
      }

      [data-title]:after {
        content: attr(data-title);
        background-color: #252841;
        color: #fff;
        font-size: 14px;
        position: absolute;
        padding: 6px 8px 3px 8px;
        bottom: -2.75em;
        box-shadow: 0 1px 10px 0 rgb(0 0 0 / 30%);
        opacity: 0;
        z-index: 99999;
        visibility: hidden;
        border-radius: 6px;
      }

      [data-title] {
        position: relative;
      }

      ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
      }

      ::-webkit-scrollbar-thumb {
        background: #2a2a2a;
        border-radius: 4px;
      }

      ::-webkit-scrollbar-track {
        background: transparent;
      }

      @font-face {
        font-family: "CircularStd";
        src: url("/fonts/CircularStd-Medium.woff2") format("woff2");
        font-weight: 500;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: "CircularStd";
        src: url("/fonts/CircularStd-Book.woff2") format("woff2");
        font-weight: 400;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: "CircularStd";
        src: url("/fonts/CircularStd-Light.woff2") format("woff2");
        font-weight: 300;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: "CircularStd";
        src: url("/fonts/CircularStd-Bold.woff2") format("woff2");
        font-weight: 700;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: "CircularStd";
        src: url("/fonts/CircularStd-Black.woff2") format("woff2");
        font-weight: 900;
        font-style: normal;
        font-display: swap;
      }
    </style>

    <script is:inline defer>
      function setContainerColor(dataColor) {
        const playlistContainer = document.getElementById("playlist-container");
        const currentColor = playlistContainer?.getAttribute("data-color");
        if (dataColor && dataColor !== currentColor) {
          playlistContainer?.style.setProperty("--context-color", dataColor);
          playlistContainer?.setAttribute("data-color", dataColor);
        }
      }

      window.coloradTimeout = null;
      for (const playlist of document.querySelectorAll(".playlist-item")) {
        playlist.addEventListener("mouseover", () =>
          onMouseOverColorad(playlist)
        );
        playlist.addEventListener("mouseout", onMouseOutColorad);
        playlist.addEventListener("focus", () => onMouseFocusColorad(playlist));
        playlist.addEventListener("blur", onMouseOutColorad);
      }

      function onMouseFocusColorad(el) {
        if (el) {
          const dataColor = el.getAttribute("data-color");
          if (!dataColor) return;
          setContainerColor(dataColor);
        }
      }
      function onMouseOverColorad(el) {
        if (el) {
          const dataColor = el.getAttribute("data-color");
          if (!dataColor) return;
          window.coloradTimeout = setTimeout(
            () => setContainerColor(dataColor),
            200
          );
        }
      }
      function onMouseOutColorad() {
        if (window.coloradTimeout) {
          clearTimeout(window.coloradTimeout);
          window.coloradTimeout = null;
        }
      }
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        if (!(document as any).startViewTransition) {
          const notSupportElement = document.getElementById("not-support");
          if (notSupportElement) {
            notSupportElement.classList.remove("hidden");
          }
        }
        document.addEventListener("astro:page-load", () => {
          for (const el of document.querySelectorAll(".el-to-fade")) {
            el.classList.remove("scale-90");
          }
        });
      });
    </script>
  </body>
</html>
